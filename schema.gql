# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Arbitrary object"""
scalar Any

type AttachmentRecord {
  id: ID!
  sizeB: Int!
  mimeType: String!
  filename: String!
  bucketRef: ID!
  extension: String!
}

type CardItem {
  id: String!
  name: String!
  quantity: Float!
  price: Float!
}

type Category {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String!
  owner: ID!
  parent: Category
  status: CategoryStatus!
  children: [Category!]!
  price: Float!
  minPrice: Float!
  maxPrice: Float!
}

input CategoryInput {
  name: String!
  parent: ID
  status: String!
}

enum CategoryStatus {
  ENABLED
  DISABLED
  DELETED
}

type ChatMessage {
  id: ID!
}

input ChatMessageInput {
  id: String!
}

input ClientFilterInput {
  offset: Int
  limit: Int
  filter: Any
  search: String
  orderBy: OrderByInput
}

type Comment {
  createdAt: DateTime!
  updatedAt: DateTime!
  discussionId: String!
  content: String!
  postedBy: String!
}

input CommentInput {
  discussionId: String!
  content: String!
  postedBy: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DiscussionMessage {
  id: ID!
}

input DiscussionMessageInput {
  id: String!
}

type ForumMessage {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  subject: String!
  content: String!
  postedBy: String!
  comments: [Comment!]!
}

input ForumMessageInput {
  subject: String!
  content: String!
  postedBy: String!
}

type GqlTimestamp {
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageSizes {
  sm: ID
  md: ID
  lg: ID
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProduct(productInput: ProductInput!): Product!
  updateProduct(productInput: UpdateProductInput!, productId: ID!): Product!
  removeProduct(productId: ID!): Boolean!
  createCategory(categoryInput: CategoryInput!): Category!
  updateCategory(categoryInput: UpdateCategoryInput!, categoryId: ID!): Category!
  removeCategory(categoryId: ID!): Boolean!
  updateCurrentUserPassword(newPassword: String!, oldPassword: String!): Boolean!
  closeAccount: Boolean!
  updateUser(userInput: UserInput!): User!
  register(registerInput: RegisterInput!): Session!
  updatePassword(updatePasswordDto: UpdatePasswordDto!): Boolean!
  createTask(taskInput: TaskInput!): Task!
  updateTask(taskInput: UpdateTaskInput!, taskId: ID!): Task!
  removeTask(taskId: ID!): Boolean!
  createChatMessage(chatMessageInput: ChatMessageInput!): ChatMessage!
  updateChatMessage(chatMessageInput: UpdateChatMessageInput!, chatMessageId: ID!): ChatMessage!
  removeChatMessage(chatMessageId: ID!): Boolean!
  createDiscussionMessage(discussionMessageInput: DiscussionMessageInput!): DiscussionMessage!
  updateDiscussionMessage(discussionMessageInput: UpdateDiscussionMessageInput!, discussionMessageId: ID!): DiscussionMessage!
  removeDiscussionMessage(discussionMessageId: ID!): Boolean!
  chargeCard(paymentInput: Any!): Payment!
  createForumMessage(forumMessageInput: ForumMessageInput!): ForumMessage!
  updateForumMessage(forumMessageInput: UpdateForumMessageInput!, forumMessageId: ID!): ForumMessage!
  removeForumMessage(forumMessageId: ID!): Boolean!
  createComment(commentInput: CommentInput!): Comment!
  updateComment(commentInput: UpdateCommentInput!, commentId: ID!): Comment!
  removeComment(commentId: ID!): Boolean!
}

"""OrderBy direction"""
enum OrderByDirection {
  Asc
  Desc
}

input OrderByInput {
  property: String!
  direction: OrderByDirection!
}

type Payment {
  firstname: String
  lastname: String
  email: String
  phone: String
  address: String
  country: String
  town: String
  postalcode: String
  carditems: [CardItem!]
  paymentInfos: Any
  charge: Any
}

input PaymentInput {
  id: String!
}

type Product {
  id: ID!
  name: String!
  description: String
  type: String
  price: Float
  code: String
  quota: Float
  category: Category
  cover: AttachmentRecord
  gallery: [AttachmentRecord!]
  variants: [Any!]
}

type ProductBill {
  firstname: String
  lastname: String
  email: String
  phone: String
  address: String
  country: String
  town: String
  postalcode: String
  cartItem: CardItem
  paymentInfos: Any
  charge: Any
}

input ProductInput {
  name: String!
  description: String
  price: Float!
  category: ID
}

type Query {
  fetchMyProduct(productId: ID!): Product!
  fetchMyProducts(clientFilter: ClientFilterInput): [Product!]!
  fetchMyCategories(clientFilter: ClientFilterInput): [Category!]!
  fetchCategory(categoryId: ID!): Category!
  fetchCategoryByName(categoryName: String!): Category!
  fetchCategories(clientFilter: ClientFilterInput): [Category!]!
  fetchCategoriesForMarket: [Category!]!
  fetchMainCategoriesForMarket: [Category!]!
  fetchProduct(productId: ID!): Product!
  fetchProducts(categoryId: ID): [Product!]!
  fetchCurrentUser: User!
  login(loginInput: LoginInput!): Session!
  resetPassword(email: String!): String!
  fetchTask(taskId: ID!): Task!
  fetchTasks(clientFilter: ClientFilterInput!): [Task!]!
  fetchChatMessage(chatMessageId: ID!): ChatMessage!
  fetchChatMessages(clientFilter: ClientFilterInput!): [ChatMessage!]!
  fetchDiscussionMessage(discussionMessageId: ID!): DiscussionMessage!
  fetchDiscussionMessages(clientFilter: ClientFilterInput!): [DiscussionMessage!]!
  fetchProviderBills: [ProductBill!]!
  fetchForumMessage(forumMessageId: ID!): ForumMessage!
  fetchForumMessages: [ForumMessage!]!
  fetchComment(commentId: ID!): Comment!
  fetchComments(clientFilter: ClientFilterInput!): [Comment!]!
}

input RegisterInput {
  password: String!
  email: String!
  firstName: String!
  lastName: String!
}

type Session {
  token: String!
  user: User!
}

type Task {
  id: ID!
}

input TaskInput {
  id: String!
}

input UpdateCategoryInput {
  name: String
  parent: ID
  status: CategoryStatus!
}

input UpdateChatMessageInput {
  id: String!
}

input UpdateCommentInput {
  id: String!
}

input UpdateDiscussionMessageInput {
  id: String!
}

input UpdateForumMessageInput {
  subject: String!
  content: String!
}

input UpdatePasswordDto {
  password: String!
  resetToken: String!
  resetCode: Float!
}

input UpdatePaymentInput {
  id: String!
}

input UpdateProductInput {
  id: String!
}

input UpdateTaskInput {
  id: String!
}

type User {
  _id: ID!
  firstName: String
  lastName: String
  phoneNumber: String
  email: String
  avatar: ImageSizes
}

input UserInput {
  phoneNumber: String
  lastName: String
  firstName: String
  password: String
  email: String
}
